:NewDefs


let bs = [1, 2, 3]
//│ let bs: [1, 2, 3]
//│ bs
//│    = [ 1, 2, 3 ]

:pe // TODO
let t = [0, ...bs]
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.10: 	let t = [0, ...bs]
//│ ╙──      	            ^^^
//│ let t: [0]
//│ t
//│   = [ 0 ]

t.0
//│ 0
//│ res
//│     = 0

:e // TODO
t.1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.24: 	t.1
//│ ║        	^^^
//│ ╟── definition of let binding t of type `{0: 0}` does not have field '1'
//│ ║  l.10: 	let t = [0, ...bs]
//│ ║        	    ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{1: ?a}`
//│ ║  l.24: 	t.1
//│ ╙──      	^
//│ error
//│ res
//│     = undefined

:e // TODO
t.2
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.39: 	t.2
//│ ║        	^^^
//│ ╟── definition of let binding t of type `{0: 0}` does not have field '2'
//│ ║  l.10: 	let t = [0, ...bs]
//│ ║        	    ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{2: ?a}`
//│ ║  l.39: 	t.2
//│ ╙──      	^
//│ error
//│ res
//│     = undefined

:e
t.3
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.54: 	t.3
//│ ║        	^^^
//│ ╟── definition of let binding t of type `{0: 0}` does not have field '3'
//│ ║  l.10: 	let t = [0, ...bs]
//│ ║        	    ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{3: ?a}`
//│ ║  l.54: 	t.3
//│ ╙──      	^
//│ error
//│ res
//│     = undefined


let cs: Array[Int] = bs
//│ let cs: Array[Int]
//│ cs
//│    = [ 1, 2, 3 ]

:pe  // TODO
let t = [0, ...cs]
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.75: 	let t = [0, ...cs]
//│ ╙──      	            ^^^
//│ let t: [0]
//│ t
//│   = [ 0 ]

t.0
//│ 0
//│ res
//│     = 0

:e
t.1
//│ ╔══[ERROR] Type mismatch in field selection:
//│ ║  l.89: 	t.1
//│ ║        	^^^
//│ ╟── definition of let binding t of type `{0: 0}` does not have field '1'
//│ ║  l.75: 	let t = [0, ...cs]
//│ ║        	    ^^^^^^^^^^^^^^
//│ ╟── but it flows into reference with expected type `{1: ?a}`
//│ ║  l.89: 	t.1
//│ ╙──      	^
//│ error
//│ res
//│     = undefined


:pe // TODO
fun f(x, y, ...zs) = x
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	            ^^^
//│ fun f: forall 'a. ('a, anything) -> 'a

f(0, 1)
//│ 0
//│ res
//│     = 0

:e // TODO
f(0, 1, 2)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.117: 	f(0, 1, 2)
//│ ║         	^^^^^^^^^^
//│ ╟── argument list of type `[0, 1, 2]` does not match type `[?a, ?b]`
//│ ║  l.117: 	f(0, 1, 2)
//│ ║         	 ^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	     ^^^^^^^^^^^^^
//│ error
//│ res
//│     = 0

:e // TODO
f(0, 1, 2, 3)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.132: 	f(0, 1, 2, 3)
//│ ║         	^^^^^^^^^^^^^
//│ ╟── argument list of type `[0, 1, 2, 3]` does not match type `[?a, ?b]`
//│ ║  l.132: 	f(0, 1, 2, 3)
//│ ║         	 ^^^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	     ^^^^^^^^^^^^^
//│ error
//│ res
//│     = 0

:e // TODO
f(0)
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.147: 	f(0)
//│ ║         	^^^^
//│ ╟── argument of type `[0]` does not match type `[?a, ?b]`
//│ ║  l.147: 	f(0)
//│ ║         	 ^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	     ^^^^^^^^^^^^^
//│ error
//│ res
//│     = 0

:pe // TODO
:e // TODO
f(...bs)
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.163: 	f(...bs)
//│ ╙──       	  ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.163: 	f(...bs)
//│ ║         	^^^^^^^^
//│ ╟── argument of type `[]` does not match type `[?a, ?b]`
//│ ║  l.163: 	f(...bs)
//│ ║         	 ^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	     ^^^^^^^^^^^^^
//│ error
//│ res
//│     = undefined

:pe // TODO
:e // TODO
f(0, ...bs)
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.182: 	f(0, ...bs)
//│ ╙──       	     ^^^
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.182: 	f(0, ...bs)
//│ ║         	^^^^^^^^^^^
//│ ╟── argument of type `[0]` does not match type `[?a, ?b]`
//│ ║  l.182: 	f(0, ...bs)
//│ ║         	 ^^^^^^^^^^
//│ ╟── Note: constraint arises from tuple literal:
//│ ║  l.105: 	fun f(x, y, ...zs) = x
//│ ╙──       	     ^^^^^^^^^^^^^
//│ error
//│ res
//│     = 0

:pe // TODO
f(0, 1, ...bs)
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.200: 	f(0, 1, ...bs)
//│ ╙──       	        ^^^
//│ 0
//│ res
//│     = 0


:pe // TODO
fun f: 'xs -> [1, 2, ...'xs]
//│ ╔══[PARSE ERROR] Unexpected operator here
//│ ║  l.210: 	fun f: 'xs -> [1, 2, ...'xs]
//│ ╙──       	                     ^^^
//│ fun f: anything -> [1, 2]

f([])
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

f([1])
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

f([1, 2])
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

f(bs)
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

f(cs)
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

:e
f()
//│ ╔══[ERROR] Type mismatch in application:
//│ ║  l.247: 	f()
//│ ║         	^^^
//│ ╟── argument of type `[]` does not match type `['xs]`
//│ ║  l.247: 	f()
//│ ║         	 ^^
//│ ╟── Note: constraint arises from tuple type:
//│ ║  l.210: 	fun f: 'xs -> [1, 2, ...'xs]
//│ ╙──       	       ^^^
//│ error | [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented

// :e // TODO
f(0)
//│ [1, 2]
//│ res
//│     = <no result>
//│       f is not implemented



